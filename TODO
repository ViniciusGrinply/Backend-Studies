2 tipos de usuários: os comuns e lojistas, ambos têm carteira com dinheiro e realizam transferências entre eles.
Para ambos tipos de usuário, precisamos do Nome Completo, CPF, e-mail e Senha. CPF/CNPJ e e-mails devem ser únicos no sistema.
Usuários podem enviar dinheiro (efetuar transferência) para lojistas e entre usuários.
Lojistas só recebem transferências, não enviam dinheiro para ninguém.
Validar se o usuário tem saldo antes da transferência.
Antes de finalizar a transferência, deve-se consultar um serviço autorizador externo, use este mock para simular (https://run.mocky.io/v3/8fafdd68-a090-496f-8c9a-3442cf30dae6).
A operação de transferência deve ser uma transação (ou seja, revertida em qualquer caso de inconsistência) e o dinheiro deve voltar para a carteira do usuário que envia.
No recebimento de pagamento, o usuário ou lojista precisa receber notificação (envio de email, sms) enviada por um serviço de terceiro e eventualmente este serviço pode estar indisponível/instável. Use este mock para simular o envio (http://o4d9z.mocklab.io/notify).
Este serviço deve ser RESTFul.

Exemplo de Payload(pode melhorar):
POST /transaction

{
    "value" : 100.00,
    "payer" : 4,
    "payee" : 15
}

O que será avaliado:
-Desenho de arquitetura
-Código limpo e organizado (nomenclatura, etc)
-Conhecimento de padrões (PSRs, design patterns, SOLID)
-Ser consistente e saber argumentar suas escolhas
-Apresentar soluções que domina
-Modelagem de Dados
-Manutenibilidade do Código
-Tratamento de erros
-Cuidado com itens de segurança
-Arquitetura (estruturar o pensamento antes de escrever)
-Carinho em desacoplar componentes (outras camadas, service, repository)

O que NÃO será avaliado
-Fluxo de cadastro de usuários e lojistas
-Frontend (só avaliaremos a (API Restful)[https://www.devmedia.com.br/rest-tutorial/28912])
-Autenticação
-O que será um Diferencial
-Uso de Docker
-Testes de integração
-Testes unitários
-Uso de Design Patterns
-Documentação
-Proposta de melhoria na arquitetura

TODO:
 Rodar o app
 chamar pelo postman